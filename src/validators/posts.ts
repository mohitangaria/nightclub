import { Joi, Common, _ } from "../config/routeImporter";
const {userObject,attachmentObject,categoryObject}=require("./relations")

const postRequest=Joi.object().keys({
    title: Joi.string().trim().required().error(errors=>{return Common.routeError(errors,'POST_TITLE_IS_REQUIRED')}).example("Post title").description('Post title'),
    description: Joi.string().trim().required().error(errors=>{return Common.routeError(errors,'POST_DESCRIPTION_IS_REQUIRED')}).example("Post description").description('Post description'),
    excerpt: Joi.string().trim().optional().example("Post excerpt").description('Post excerpt'),
    postType: Joi.string().required().error(errors=>{return Common.routeError(errors,'POST_TYPE_IS_REQUIRED')}).example("Post type (page or post)").description('Post type').valid('post','page'),
    categoryId: Joi.number().optional().allow(null).default(null).example(1).description('Category for the post'),
    imageId:Joi.number().optional().allow(null).example(1).description('Attachment id to be associated with post as featured Image').default(null),
    videoId:Joi.number().optional().allow(null).example(1).description('Attachment id to be associated with post as video').default(null)
}).label('post-request').description('Create object for post')

const postIdentity=Joi.object().keys({
    id:Joi.number().required().example(1).description("Unique identifier for the post"),
}).label('post-identiry').description('Identifier for the content type')

const postSulgIdentity=Joi.object().keys({
    slug:Joi.string().required().example(1).description("Unique identifier for the post"),
}).label('post-slug-identiry').description('Identifier for the content type')

const post=Joi.object().keys({
    id:Joi.number().example(1).description("Unique identifier for the category type"),
    slug:Joi.string().example('post-slug').description("Post slug generated by system"),
    title:Joi.string().example("Post title").description('Post title'),
    description:Joi.string().example("Post description").description('Post description'),
    excerpt:Joi.string().example("Post excerpt").description('Post excerpt'),
    category:categoryObject,
    postImage:attachmentObject.allow(null),
    postVideo:attachmentObject.allow(null),
    author:userObject.allow(null),
    updatedBy:userObject.allow(null),
    status:Joi.number().example(1).valid(0,1).description("Activation status"),
    isRevision:Joi.boolean().example(true).allow(null).description("If the entry is stored as revision or not"),
    revisionId:Joi.number().example(1).allow(null).description("Ref to the revision entity"),
    createdAt:Joi.date().example("2023-01-02T12:18:55.000Z").description("creation date"),
    updatedAt:Joi.date().example("2023-01-02T12:18:55.000Z").description("last update date")
}).label('post').description('Post object')

const postResponse=Joi.object().keys({
    message:Joi.string().example("Request status message").description("Message to confirm the operation"),
    responseData:post
}).label('post-response').description('Post operation response object')


const postDeletedObj = post.keys({deletedAt:Joi.date().example("2023-01-02T12:18:55.000Z").description("Date when record was deleted"),}).label('deleted-category').description('Deleted models for category');

const postDeleteResponse=Joi.object().keys({
    message:Joi.string().example("Request status message").description("Message to confirm the operation"),
    responseData:postDeletedObj
}).label('post-delete-response').description('Post operation response object')

const postsResponse=Joi.object().keys({
    message:Joi.string().example("Request status message").description("Message to confirm the operation"),
    responseData:Joi.array().items(post).min(0).label('posts-listing').description('Array of post objects')
}).label('posts-response').description('List of all posts in array format')

const listPostRequest=Joi.object().keys({
    page:Joi.number().optional().min(1).default(1),
    perPage:Joi.number().optional().min(1).default(+process.env.PAGINATION_LIMIT!),
    postType:Joi.string().example('post,page').valid('post','page').default('post').description("Type of content to be listed"),
    showRevisions:Joi.boolean().default(false).valid(true,false).example(false).description("If request is to list all posts or revisions of a post. For revisions id is required parameter"),
}).label('post-list-request').description('Post list request with filters')

const listPostPublicRequest=Joi.object().keys({
    page:Joi.number().optional().min(1).default(1),
    perPage:Joi.number().optional().min(1).default(+process.env.PAGINATION_LIMIT!),
    postType:Joi.string().example('post,page').valid('post','page').default('post').description("Type of content to be listed")
}).label('post-list-request').description('Post list request with filters')

const listPostResponse=Joi.object().keys({
    message:Joi.string().example("Request status message").description("Message to confirm the operation"),
    responseData:Joi.object().keys({
        data:Joi.array().items(post).min(0).description('Array of post type objects'),
        perPage:Joi.number().example(1).description("Number or required in response"),
        page:Joi.number().example(1).description("page no for which data is requested"),
        totalPages:Joi.number().example(1).description("Total number of pages response set will generate"),
        totalRecords:Joi.number().example(1).description("Total number of pages response set will generate")
    }).label('post-list-responseData').description('Post list response data object')
}).label('post-list-response').description('Post list response')


const postStatusRequest = Joi.object().keys({
    status:Joi.boolean().required().error(errors=>{return Common.routeError(errors,'POST_STATUS_IS_REQUIRED')}).valid(true,false).description("Status of the post type")
}).label('post-status-request').description("Request to update the status of the post")

export {
    postIdentity,
    postDeleteResponse,
    postRequest,
    postResponse,
    postsResponse,
    listPostRequest,
    listPostResponse,
    postStatusRequest,
    listPostPublicRequest,
    postSulgIdentity
}